var x=(p,e)=>()=>(e||p((e={exports:{}}).exports,e),e.exports);var w=x((j,Q)=>{Q.exports={name:"@psysecgroup/cluster-queue",description:"Easily sets up primary and worker clustering, allowing primary to contain pending jobs and for workers to grab them off the queue the moment they are availible.",version:"1.0.0",author:"The PsySec Group",license:"MIT",bugs:{url:"https://github.com/PsySecGroup/cluster-queue/issues"},homepage:"https://github.com/PsySecGroup/cluster-queue#readme",repository:{type:"git",url:"git+https://github.com/PsySecGroup/cluster-queue.git"},scripts:{start:"node -r source-map-support/register dist/index.js",dev:`echo 'Type "npm run sb-watch" to get started'`,build:"tsup-node --legacy-output --minify --format esm,cjs,iife","sb-watch":`nodemon --watch src/ -e ts,tsx,js --exec "tsup-node --onSuccess 'node -r source-map-support/register dist/index.js setState test'"`,watch:"tsup-node --watch --onSuccess 'node -r source-map-support/register dist/index.js'"},tsup:{entry:["src/index.ts"],splitting:!1,sourcemap:!0,clean:!1,dts:!0},main:"./dist/index.js",module:"./dist/esm/index.js",types:"./dist/index.d.ts",files:["/dist"],devDependencies:{"@types/node":"^17.0.41",nodemon:"^2.0.16","source-map-support":"^0.5.21",tsup:"^6.1.0",typescript:"^4.7.3"},dependencies:{commander:"^9.3.0"}}});import u from"cluster";import K from"cluster";import{Command as v}from"commander";var y={},n=class{static register(e,s){y[e]=s}constructor(e,s,r,t){if(y[e]===void 0)throw new RangeError(`"${e}" has not been registered.`);this.command=e,this.args=s,this.from=r,this.to=t}clone(e,s){return new n(this.command,this.args,e,s)}run(e,s,r){return y[this.command](this.args,e,this,s,r)}};var{name:W,description:b,version:R}=w(),T=/[^A-Za-z0-9_]/g,h=class{constructor(e,s){this.queue=e,this.program=new v,this.program.name(W).description(b).version(R);for(let r of s)this.register(r)}register(e){if(!K.isPrimary)return;let s=e.command.indexOf("cli:")===0,r=s?e.command.substring(4):e.command;if(n.register(e.command,e.action),!s)return;let t=r===""?this.program:this.program.command(r);t.description(e.description);let c=Object.keys(e.args);for(let o of c){let a=e.args[o];t.argument(o,a)}for(let o of Object.keys(e.options)){let a=e.options[o];t.option(o,a)}t.action((...o)=>{let a=typeof o[o.length-2]=="string"?{}:o[o.length-2];a.cli={};let i=0;for(let m of c)a.cli[m.replace(T,"")]=o[i],i+=1;this.queue.add(new n(e.command,a,"cli","primary"))})}start(){this.program.parse(process.argv)}};import A from"cluster";import*as P from"os";var g=class{constructor(e,s){this.process=e,this.process.on("message",async r=>{this.process.process!==void 0&&(console.info(`[PRIMARY -> PID ${this.process.process.pid}]`,r),await s(r))})}restart(){this.primaryCommand("shutdown"),this.kill()}kill(){this.process.removeAllListeners(),this.process.kill("SIGKILL"),this.process=void 0}send(e){console.info(`[PID ${this.process.process.pid} -> PRIMARY]`,e),this.process.process.send(e)}workerCommand(e,s={}){this.send(new n(e,s,this.process.process.pid,"workers"))}primaryCommand(e,s={}){this.send(new n(e,s,this.process.process.pid,"primary"))}};var S=P.cpus(),k=S.length,f=class{constructor(e,s,r,t,c,o,a=!1){this.workers=[];this.state={};this.cli=s,this.process=e,this.useLogging=a,this.primaryQueue=r,this.workerQueue=t,e.on("newCommand",i=>{i==="primary"?this.primaryQueue.next().run(this.state,this.primaryQueue,this.workerQueue):this.send(new n("_pending",{},"primary","workers"))}),e.on("message",async(i,m)=>{if(console.log("WAT"),m.command==="_next"){let l=this.workerQueue.next(i);await c(i,l)}else await c(i,m)}),e.on("exit",(i,m,l)=>{this.useLogging&&console.info("Worker "+i.process.pid+" died with code: "+m+", and signal: "+l),this.spawnWorker()}),e.on("online",i=>{this.useLogging&&console.info("Worker "+i.process.pid+" is online");let m=new g(i,o);this.workers.push(m)})}async start(){await Promise.all([new Promise(s=>{setTimeout(()=>{this.primaryQueue.queue.length===0&&s(!0)},100)})]),this.useLogging&&console.info("Primary cluster setting up "+k+" workers...");for(var e=0;e<k;e++)this.spawnWorker()}spawnWorker(){let e=this.process.fork();return e.on("disconnect",()=>{e.removeAllListeners(),e.kill(),e=void 0}),e}addTask(e){return e.to==="primary"?this.primaryQueue.add(e):this.workerQueue.add(e),e}workerCommand(e,s){this.addTask(new n(e,s,"primary","workers"))}primaryCommand(e,s){this.addTask(new n(e,s,"primary","primary"))}getWorkerProcesses(){return Object.values(A.workers)}restartWorkers(){for(let e of this.workers)e.restart()}send(e){let s=this.getWorkerProcesses();for(let r of s)(e.to==="workers"||r.process!==void 0&&r.process.pid===e.to)&&(this.useLogging&&console.info(`[PRIMARY -> PID ${r.process.pid}]`,e),r.process.send(e))}};import M from"cluster";var d=class{constructor(e){this.queue=[];this.primary=e}add(e){let s=this.queue.push(e);return this.primary.emit("newCommand",e.to),s}shift(){return this.queue.shift()}next(e){let s=this.queue.shift();if(s===void 0)return;let r=M.isPrimary?"primary":e.process.pid,t=s.clone("primary",r);return e&&e.send(t),t}};var C=class{constructor(e,s=!1){return this.commands=e,this.useLogging=s,this.commands.push({command:"log",action:console.log}),this}onMessage(e,s){return this.onPrimaryMessage=e,this.onWorkerMessage=s,this}async start(e,s){if(u.isPrimary){let r=new d(u),t=new d(u),c=new h(r,this.commands),o=new f(u,c,r,t,this.onPrimaryMessage,this.onWorkerMessage,this.useLogging);c.start(),await o.start(),await e(o)}else await s(u.worker)}};(async function(){await new C([{command:"cli:setState",description:"Sets a state in the primary process",args:{"<text>":"The name of the state to set"},options:{},action:(s,r)=>{r.text=s.cli.text}}],!0).onMessage(async(s,r)=>{console.log("PRIMARY MESSAGE")},async s=>{console.log("WORKER MESSAGE")}).start(async()=>{console.log("PRIMARY START")},async()=>{console.log("WORKER START")})})();export{C as Cluster};
//# sourceMappingURL=index.js.map