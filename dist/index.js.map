{"version":3,"sources":["../src/index.ts","../src/cli.ts","../src/command.ts","../src/commands.ts","../src/primary.ts","../src/queue.ts"],"sourcesContent":["import type { CliDefinition, KeyPair, QuickSends } from './index.d';\r\nimport cluster from 'cluster';\r\nimport { Cli } from './cli';\r\nimport { Primary } from './primary';\r\nimport { defaultCommands } from './commands';\r\nimport { Command } from './command';\r\n\r\nexport class Cluster {\r\n  commands: CliDefinition[];\r\n  useLogging: boolean;\r\n  onPrimaryCommand: (\r\n    worker: typeof cluster.worker,\r\n    command: Command\r\n  ) => Promise<void>;\r\n  onWorkerCommand: (command: Command) => Promise<void>;\r\n\r\n  constructor(commands: CliDefinition[], useLogging: boolean = false) {\r\n    this.commands = commands;\r\n    this.useLogging = useLogging;\r\n\r\n    // Default actions\r\n    for (const defaultCommand of defaultCommands) {\r\n      this.commands.push(defaultCommand);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Cluster node command handlers\r\n   */\r\n  onCommand(\r\n    onPrimaryCommand: (\r\n      worker: typeof cluster.worker,\r\n      command: Command\r\n    ) => Promise<void>,\r\n    onWorkerCommand: (command: Command) => Promise<void>\r\n  ) {\r\n    this.onPrimaryCommand = onPrimaryCommand;\r\n    this.onWorkerCommand = onWorkerCommand;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Start the cluster nodes\r\n   */\r\n  async start(\r\n    onPrimaryStart: (primary: Primary) => Promise<void>,\r\n    onWorkerStart: (worker: typeof cluster.worker) => Promise<void>\r\n  ) {\r\n    if (cluster.isPrimary) {\r\n      const cli = new Cli(this.commands);\r\n      const primary = new Primary(\r\n        cluster,\r\n        cli,\r\n        this.onPrimaryCommand,\r\n        this.useLogging\r\n      );\r\n\r\n      // Parse the CLI\r\n      cli.start();\r\n\r\n      // Wait for the primary queue to be empty\r\n\r\n      await primary.start();\r\n      await onPrimaryStart(primary);\r\n    } else {\r\n      await onWorkerStart(cluster.worker);\r\n    }\r\n  }\r\n}\r\n\r\n// @TODO: build a test bench\r\n\r\n(async function main() {\r\n  const instance = new Cluster(\r\n    [\r\n      {\r\n        command: 'cli:setState',\r\n        description: 'Sets a state in the primary process',\r\n        args: {\r\n          '<text>': 'The name of the state to set',\r\n        },\r\n        options: {},\r\n        action: (command: Command, state: KeyPair, sends: QuickSends) => {\r\n          state.text = command.args.cli.text;\r\n          console.log('setState', state);\r\n        },\r\n      },\r\n    ],\r\n    true\r\n  ).onCommand(\r\n    async (worker: typeof cluster.worker, command: Command) => {\r\n      console.log('PRIMARY COMMAND', command);\r\n    },\r\n    async (command: Command) => {\r\n      console.log('WORKER COMMAND', command);\r\n    }\r\n  );\r\n\r\n  await instance.start(\r\n    async () => {\r\n      console.log('PRIMARY START');\r\n    },\r\n    async () => {\r\n      console.log('WORKER START');\r\n    }\r\n  );\r\n})();\r\n","import type { CliDefinition, KeyPair } from './index.d';\r\nimport cluster from 'cluster';\r\nimport { Command as Commander } from 'commander';\r\nimport { Command } from './command';\r\nimport { internalCommands } from './commands';\r\n\r\nconst { name, description, version } = require('../package.json');\r\n\r\nconst removeChars = /[^A-Za-z0-9_]/g;\r\n\r\nexport class Cli {\r\n  program: Commander;\r\n\r\n  constructor(definitions: CliDefinition[]) {\r\n    this.program = new Commander();\r\n    this.program.name(name).description(description).version(version);\r\n\r\n    for (const definition of definitions) {\r\n      this.register(definition);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers a new CLI command\r\n   */\r\n  register(definition: CliDefinition) {\r\n    if (!cluster.isPrimary) {\r\n      return;\r\n    }\r\n\r\n    const isCliCommand = definition.command.indexOf('cli:') === 0;\r\n\r\n    const commandName = isCliCommand\r\n      ? definition.command.substring(4)\r\n      : definition.command;\r\n\r\n    // Register the definition as a command\r\n    Command.register(definition.command, definition.action);\r\n\r\n    if (!isCliCommand) {\r\n      return;\r\n    }\r\n\r\n    // Register the command\r\n    const newCommand =\r\n      commandName === '' ? this.program : this.program.command(commandName);\r\n\r\n    newCommand.description(definition.description);\r\n\r\n    // Define the end-of-line arguments\r\n    const argKeys = Object.keys(definition.args);\r\n\r\n    for (const arg of argKeys) {\r\n      const description = definition.args[arg];\r\n\r\n      newCommand.argument(arg, description);\r\n    }\r\n\r\n    // Define the flags/options\r\n    for (const option of Object.keys(definition.options)) {\r\n      const description = definition.options[option];\r\n\r\n      newCommand.option(option, description);\r\n    }\r\n\r\n    // program.action(definition.action);\r\n    newCommand.action((...args: string[] & [(KeyPair | string)?]) => {\r\n      const options =\r\n        typeof args[args.length - 2] === 'string'\r\n          ? {}\r\n          : (args[args.length - 2] as KeyPair);\r\n\r\n      options.cli = {};\r\n\r\n      let i = 0;\r\n      for (const key of argKeys) {\r\n        options.cli[key.replace(removeChars, '')] = args[i];\r\n        i += 1;\r\n      }\r\n\r\n      cluster.emit(\r\n        internalCommands.enqueueJob,\r\n        new Command(definition.command, options, 'cli', 'primary')\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start the CLI\r\n   */\r\n  start() {\r\n    this.program.parse(process.argv);\r\n  }\r\n}\r\n","import type {\r\n  CommandAction,\r\n  CommandFrom,\r\n  CommandTo,\r\n  iCommand,\r\n  KeyPair,\r\n  QuickSends,\r\n} from './index.d';\r\n\r\nconst commands: KeyPair<CommandAction> = {};\r\n\r\nexport class Command implements iCommand {\r\n  command: string;\r\n  args: KeyPair;\r\n  from: CommandFrom;\r\n  to: CommandTo;\r\n\r\n  /**\r\n   * Registers a new command\r\n   */\r\n  static register(command: string, onAction: CommandAction) {\r\n    commands[command] = onAction;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   */\r\n  constructor(\r\n    command: string,\r\n    args: KeyPair,\r\n    from: CommandFrom,\r\n    to: CommandTo\r\n  ) {\r\n    if (commands[command] === undefined) {\r\n      throw new RangeError(`\"${command}\" has not been registered.`);\r\n    }\r\n\r\n    this.command = command;\r\n    this.args = args;\r\n    this.from = from;\r\n    this.to = to;\r\n  }\r\n\r\n  /**\r\n   * Clones a command and changes the to and from properties\r\n   */\r\n  clone(from: CommandFrom, to: CommandTo) {\r\n    return new Command(this.command, this.args, from, to);\r\n  }\r\n\r\n  /**\r\n   * Runs the command\r\n   */\r\n  async run(state: KeyPair, quickSends: QuickSends) {\r\n    return commands[this.command](this, state, quickSends);\r\n  }\r\n}\r\n","import type { CliDefinition, iCommand, KeyPair } from './index.d';\r\nimport { Queue } from './queue';\r\n\r\nexport const internalCommands = {\r\n  getNextJob: '_getNextJob',\r\n  enqueueJob: '_enqueueJob',\r\n  newJobNotice: '_newJobNotice',\r\n  message: 'message',\r\n};\r\n\r\nexport const defaultCommands: CliDefinition[] = [\r\n  {\r\n    command: 'log',\r\n    action: console.log,\r\n  },\r\n];\r\n","import type { KeyPair, QuickSends } from './index.d';\r\n\r\nimport cluster from 'cluster';\r\nimport * as os from 'os';\r\nimport { Cli } from './cli';\r\nimport { Command } from './command';\r\nimport { Queue } from './queue';\r\nimport { internalCommands } from './commands';\r\nimport { CommandTo } from '../dist';\r\n\r\ntype Process = typeof cluster;\r\ntype Worker = typeof cluster.worker;\r\n\r\nconst cpus = os.cpus();\r\nconst numWorkers = cpus.length;\r\n\r\nexport class Primary {\r\n  process: Process;\r\n  primaryQueue: Queue;\r\n  workerQueue: Queue;\r\n  useLogging: boolean;\r\n  cli: Cli;\r\n  state: KeyPair = {};\r\n  sends: QuickSends;\r\n\r\n  constructor(\r\n    process: Process,\r\n    cli: Cli,\r\n    onPrimaryMessage: (\r\n      worker: Worker,\r\n      command: Command\r\n    ) => Promise<Command | void>,\r\n    useLogging: boolean = false\r\n  ) {\r\n    this.cli = cli;\r\n    this.process = process;\r\n    this.useLogging = useLogging;\r\n    this.primaryQueue = new Queue();\r\n    this.workerQueue = new Queue();\r\n\r\n    this.sends = {\r\n      getNextJob: () => {\r\n        return this.process.emit(\r\n          internalCommands.getNextJob + '_primary',\r\n          new Command(\r\n            internalCommands.getNextJob + '_primary',\r\n            {},\r\n            'primary',\r\n            'primary'\r\n          )\r\n        );\r\n      },\r\n      enqueueJob: (\r\n        command: string,\r\n        args: KeyPair,\r\n        to: CommandTo = 'workers'\r\n      ) => {\r\n        return this.process.emit(\r\n          internalCommands.enqueueJob,\r\n          new Command(command, args, 'primary', to)\r\n        );\r\n      },\r\n      newJobNotice: () => {\r\n        // @TODO\r\n        this.send(\r\n          new Command(internalCommands.enqueueJob, {}, 'primary', 'workers')\r\n        );\r\n      },\r\n      message: async (command: string, args: KeyPair) => {\r\n        if (this.useLogging) {\r\n          console.log('Primary Message:', command);\r\n        }\r\n\r\n        await onPrimaryMessage(\r\n          null,\r\n          new Command(command, args, 'primary', 'primary')\r\n        );\r\n      },\r\n    };\r\n\r\n    /**\r\n     * Enqueue new command\r\n     */\r\n    process.on(internalCommands.enqueueJob, async (command: Command) => {\r\n      if (command.to === 'primary') {\r\n        // Primary should run its next command\r\n        await command.run(this.state, this.sends);\r\n      } else {\r\n        // All workers should be told a new command has appeared\r\n        this.addTask(command);\r\n        this.sends.newJobNotice();\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Primary requests next job\r\n     */\r\n    process.on(\r\n      internalCommands.getNextJob + '_primary',\r\n      async (worker: Worker) => {\r\n        const nextCommand = this.primaryQueue.getNext(worker.process.pid);\r\n\r\n        if (nextCommand === undefined) {\r\n          return;\r\n        }\r\n\r\n        // @TODO might be bad\r\n        const finalCommand = await onPrimaryMessage(worker, nextCommand);\r\n\r\n        if (finalCommand) {\r\n          worker.send(finalCommand);\r\n        } else {\r\n          worker.send(nextCommand);\r\n        }\r\n      }\r\n    );\r\n\r\n    /**\r\n     * Worker requests next job\r\n     */\r\n    process.on(internalCommands.getNextJob, async (worker: Worker) => {\r\n      const nextCommand = this.workerQueue.getNext(worker.process.pid);\r\n\r\n      if (nextCommand === undefined) {\r\n        return;\r\n      }\r\n\r\n      // @TODO might be bad\r\n      const finalCommand = await onPrimaryMessage(worker, nextCommand);\r\n\r\n      if (finalCommand) {\r\n        worker.send(finalCommand);\r\n      } else {\r\n        worker.send(nextCommand);\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Primary receives a general message from worker\r\n     */\r\n    process.on(\r\n      internalCommands.message,\r\n      async (worker: Worker, command: Command) => {\r\n        if (this.useLogging) {\r\n          console.log('Primary Message:', command);\r\n        }\r\n        await onPrimaryMessage(worker, command);\r\n      }\r\n    );\r\n\r\n    /**\r\n     * When a worker quits\r\n     */\r\n    process.on('exit', (worker, code, signal) => {\r\n      if (this.useLogging) {\r\n        console.info(`${worker.process.pid} died: ${code} ${signal}`);\r\n      }\r\n\r\n      this.spawnWorker();\r\n    });\r\n\r\n    /**\r\n     * When a worker spawns\r\n     */\r\n    process.on('online', (worker) => {\r\n      if (this.useLogging) {\r\n        console.info('Worker ' + worker.process.pid + ' is online');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Starts the priamry process\r\n   */\r\n  async start() {\r\n    await Promise.all([\r\n      new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          if (this.primaryQueue.queue.length === 0) {\r\n            resolve(true);\r\n          }\r\n        }, 100);\r\n      }),\r\n    ]);\r\n\r\n    if (this.useLogging) {\r\n      console.info('Primary cluster setting up ' + numWorkers + ' workers...');\r\n    }\r\n\r\n    for (var i = 0; i < numWorkers; i++) {\r\n      this.spawnWorker();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Spawn a new worker that self-cleans up\r\n   */\r\n  spawnWorker() {\r\n    let worker = this.process.fork();\r\n\r\n    worker.on('disconnect', () => {\r\n      worker.removeAllListeners();\r\n      worker.kill();\r\n      worker = undefined;\r\n    });\r\n\r\n    return worker;\r\n  }\r\n\r\n  /**\r\n   * Adds a command for later processing\r\n   */\r\n  addTask(command: Command): Command {\r\n    if (command.to === 'primary') {\r\n      this.primaryQueue.add(command);\r\n    } else {\r\n      this.workerQueue.add(command);\r\n    }\r\n\r\n    return command;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  workerCommand(command: string, args: KeyPair) {\r\n    this.addTask(new Command(command, args, 'primary', 'workers'));\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  primaryCommand(command: string, args: KeyPair) {\r\n    this.addTask(new Command(command, args, 'primary', 'primary'));\r\n  }\r\n\r\n  /**\r\n   * Get worker processes\r\n   */\r\n  getWorkers() {\r\n    return Object.values(cluster.workers);\r\n  }\r\n\r\n  /**\r\n   * Send a message to workers\r\n   */\r\n  send(command: Command) {\r\n    // @TODO\r\n    const workers = this.getWorkers();\r\n\r\n    for (const worker of workers) {\r\n      if (\r\n        command.to === 'workers' ||\r\n        (worker.process !== undefined && worker.process.pid === command.to)\r\n      ) {\r\n        if (this.useLogging) {\r\n          console.info(`[PRIMARY -> PID ${worker.process.pid}]`, command);\r\n        }\r\n\r\n        worker.process.send(command);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import type { CommandTo, iQueue } from './index.d';\r\nimport cluster from 'cluster';\r\nimport { Command } from './command';\r\n\r\nexport class Queue implements iQueue {\r\n  queue: Command[] = [];\r\n\r\n  /**\r\n   * Adds a command to the queue\r\n   */\r\n  add(command: Command) {\r\n    const index = this.queue.push(command);\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Removes the first command from the queue\r\n   */\r\n  shift() {\r\n    return this.queue.shift();\r\n  }\r\n\r\n  /**\r\n   * Gets the first command in the queue and may send it to the worker to do\r\n   */\r\n  getNext(to: CommandTo): Command | undefined {\r\n    const command = this.queue.shift();\r\n\r\n    if (command === undefined) {\r\n      return;\r\n    }\r\n\r\n    const newCommand = command.clone('primary', to);\r\n\r\n    return newCommand;\r\n  }\r\n}\r\n"],"mappings":"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","names":[]}