{"version":3,"sources":["../src/index.ts","../src/master.ts","../src/queue.ts","../src/worker.ts"],"sourcesContent":["import cluster from 'cluster';\r\nimport { Master } from './master';\r\n\r\nexport function startCluster(\r\n  onMasterStart: (master: Master) => void,\r\n  onMasterMessage: (worker: typeof cluster.worker, message: any) => void,\r\n  onWorkerStart: (worker: typeof cluster.worker) => void,\r\n  onWorkerMessage: (message: any) => void\r\n) {\r\n  if (cluster.isPrimary) {\r\n    const master = new Master(cluster, onMasterMessage, onWorkerMessage, true);\r\n    onMasterStart(master);\r\n  } else {\r\n    const worker = cluster.worker;\r\n    onWorkerStart(worker);\r\n  }\r\n}\r\n\r\n// @TODO: build a test bench\r\n\r\nstartCluster(\r\n  () => {},\r\n  () => {},\r\n  () => {},\r\n  () => {}\r\n);\r\n","type Process = typeof cluster;\r\n\r\nimport cluster from 'cluster';\r\nimport * as os from 'os';\r\nimport { Command } from './command';\r\nimport { Queue } from './queue';\r\nimport { Worker } from './worker';\r\n\r\nconst cpus = os.cpus();\r\nconst numWorkers = cpus.length;\r\n\r\nexport class Master {\r\n  process: Process;\r\n  workers: Worker[] = [];\r\n  priamryQueue: Queue = new Queue();\r\n  workerQueue: Queue = new Queue();\r\n  showLogging: boolean;\r\n\r\n  constructor(\r\n    process: Process,\r\n    onMessage: (worker: typeof cluster.worker, command: Command) => void,\r\n    onWorkerMessage: (message: any) => void,\r\n    showLogging: boolean = false\r\n  ) {\r\n    this.process = process;\r\n    this.showLogging = showLogging;\r\n\r\n    process.on('message', (worker, command) => {\r\n      // Primary receives message from worker\r\n      if (command.command === '_next') {\r\n        const nextCommand = this.workerQueue.next(worker);\r\n        onMessage(worker, nextCommand);\r\n      } else {\r\n        onMessage(worker, command);\r\n      }\r\n    });\r\n\r\n    process.on('exit', (worker, code, signal) => {\r\n      // When a worker quits\r\n      if (this.showLogging) {\r\n        console.info(\r\n          'Worker ' +\r\n            worker.process.pid +\r\n            ' died with code: ' +\r\n            code +\r\n            ', and signal: ' +\r\n            signal\r\n        );\r\n      }\r\n\r\n      this.spawnWorker();\r\n    });\r\n\r\n    process.on('online', (worker) => {\r\n      // When a worker spawns\r\n      if (this.showLogging) {\r\n        console.info('Worker ' + worker.process.pid + ' is online');\r\n      }\r\n\r\n      const newWorker = new Worker(worker, onWorkerMessage);\r\n      this.workers.push(newWorker);\r\n    });\r\n\r\n    if (this.showLogging) {\r\n      console.info('Master cluster setting up ' + numWorkers + ' workers...');\r\n    }\r\n\r\n    for (var i = 0; i < numWorkers; i++) {\r\n      this.spawnWorker();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Spawn a new worker that self-cleans up\r\n   */\r\n  spawnWorker() {\r\n    let worker = this.process.fork();\r\n\r\n    worker.on('disconnect', () => {\r\n      worker.removeAllListeners();\r\n      worker.kill();\r\n      worker = undefined;\r\n    });\r\n\r\n    return worker;\r\n  }\r\n\r\n  /**\r\n   * Adds a command for later processing\r\n   */\r\n  async addTask(command: Command): Promise<Command> {\r\n    if (command.to === 'primary') {\r\n      this.priamryQueue.add(command);\r\n    } else {\r\n      this.workerQueue.add(command);\r\n    }\r\n\r\n    return command;\r\n  }\r\n\r\n  /**\r\n   * Get worker processes\r\n   */\r\n  getWorkerProcesses() {\r\n    return Object.values(cluster.workers);\r\n  }\r\n\r\n  /**\r\n   * Restart all Worker instances\r\n   */\r\n  restartWorkers() {\r\n    for (const worker of this.workers) {\r\n      worker.restart();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a message to workers\r\n   */\r\n  send(command: Command) {\r\n    const workers = this.getWorkerProcesses();\r\n\r\n    for (const worker of workers) {\r\n      if (\r\n        command.to === 'workers' ||\r\n        (worker.process !== undefined && worker.process.pid === command.to)\r\n      ) {\r\n        if (this.showLogging) {\r\n          console.info(`[MASTER -> PID ${worker.process.pid}]`, command);\r\n        }\r\n\r\n        worker.process.send(command);\r\n      }\r\n    }\r\n  }\r\n}\r\n","type Worker = typeof cluster.worker;\r\n\r\nimport cluster from 'cluster';\r\nimport { Command } from './command';\r\n\r\nexport class Queue {\r\n  queue: Command[] = [];\r\n\r\n  /**\r\n   *\r\n   */\r\n  add(command: Command) {\r\n    return this.queue.push(command);\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  shift() {\r\n    return this.queue.shift();\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  next(worker: Worker): Command | undefined {\r\n    const command = this.queue.shift();\r\n\r\n    if (command === undefined) {\r\n      return;\r\n    }\r\n\r\n    const newCommand = command.clone('primary', worker.process.pid);\r\n\r\n    worker.send(newCommand);\r\n\r\n    return newCommand;\r\n  }\r\n}\r\n","type Process = typeof cluster.worker;\r\n\r\nimport cluster from 'cluster';\r\n\r\nexport class Worker {\r\n  process: Process;\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor(worker: Process, onMessage: (message: any) => void) {\r\n    this.process = worker;\r\n\r\n    this.process.on('message', (message) => {\r\n      if (this.process.process !== undefined) {\r\n        console.info(`[MASTER -> PID ${this.process.process.pid}]`, message);\r\n        onMessage(message);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  restart() {\r\n    this.send({\r\n      command: 'shutdown',\r\n      from: this.process.process.pid,\r\n    });\r\n\r\n    this.kill();\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  kill() {\r\n    this.process.removeAllListeners();\r\n    this.process.kill('SIGKILL');\r\n    this.process = undefined;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  send(message) {\r\n    console.info(`[PID ${this.process.process.pid} -> MASTER]`, message);\r\n    this.process.process.send(message);\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAoB;;;ACEpB,qBAAoB;AACpB,SAAoB;;;ACEb,kBAAY;AAAA,EAAZ,cALP;AAME,iBAAmB;AAAA;AAAA,EAKnB,IAAI,SAAkB;AACpB,WAAO,KAAK,MAAM,KAAK;AAAA;AAAA,EAMzB,QAAQ;AACN,WAAO,KAAK,MAAM;AAAA;AAAA,EAMpB,KAAK,QAAqC;AACxC,UAAM,UAAU,KAAK,MAAM;AAE3B,QAAI,YAAY,QAAW;AACzB;AAAA;AAGF,UAAM,aAAa,QAAQ,MAAM,WAAW,OAAO,QAAQ;AAE3D,WAAO,KAAK;AAEZ,WAAO;AAAA;AAAA;;;AChCJ,mBAAa;AAAA,EAMlB,YAAY,QAAiB,WAAmC;AAC9D,SAAK,UAAU;AAEf,SAAK,QAAQ,GAAG,WAAW,CAAC,YAAY;AACtC,UAAI,KAAK,QAAQ,YAAY,QAAW;AACtC,gBAAQ,KAAK,kBAAkB,KAAK,QAAQ,QAAQ,QAAQ;AAC5D,kBAAU;AAAA;AAAA;AAAA;AAAA,EAQhB,UAAU;AACR,SAAK,KAAK;AAAA,MACR,SAAS;AAAA,MACT,MAAM,KAAK,QAAQ,QAAQ;AAAA;AAG7B,SAAK;AAAA;AAAA,EAMP,OAAO;AACL,SAAK,QAAQ;AACb,SAAK,QAAQ,KAAK;AAClB,SAAK,UAAU;AAAA;AAAA,EAMjB,KAAK,SAAS;AACZ,YAAQ,KAAK,QAAQ,KAAK,QAAQ,QAAQ,kBAAkB;AAC5D,SAAK,QAAQ,QAAQ,KAAK;AAAA;AAAA;;;AFvC9B,IAAM,QAAO,AAAG;AAChB,IAAM,aAAa,MAAK;AAEjB,mBAAa;AAAA,EAOlB,YACE,SACA,WACA,iBACA,cAAuB,OACvB;AAVF,mBAAoB;AACpB,wBAAsB,IAAI;AAC1B,uBAAqB,IAAI;AASvB,SAAK,UAAU;AACf,SAAK,cAAc;AAEnB,YAAQ,GAAG,WAAW,CAAC,QAAQ,YAAY;AAEzC,UAAI,QAAQ,YAAY,SAAS;AAC/B,cAAM,cAAc,KAAK,YAAY,KAAK;AAC1C,kBAAU,QAAQ;AAAA,aACb;AACL,kBAAU,QAAQ;AAAA;AAAA;AAItB,YAAQ,GAAG,QAAQ,CAAC,QAAQ,MAAM,WAAW;AAE3C,UAAI,KAAK,aAAa;AACpB,gBAAQ,KACN,YACE,OAAO,QAAQ,MACf,sBACA,OACA,mBACA;AAAA;AAIN,WAAK;AAAA;AAGP,YAAQ,GAAG,UAAU,CAAC,WAAW;AAE/B,UAAI,KAAK,aAAa;AACpB,gBAAQ,KAAK,YAAY,OAAO,QAAQ,MAAM;AAAA;AAGhD,YAAM,YAAY,IAAI,OAAO,QAAQ;AACrC,WAAK,QAAQ,KAAK;AAAA;AAGpB,QAAI,KAAK,aAAa;AACpB,cAAQ,KAAK,+BAA+B,aAAa;AAAA;AAG3D,aAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACnC,WAAK;AAAA;AAAA;AAAA,EAOT,cAAc;AACZ,QAAI,SAAS,KAAK,QAAQ;AAE1B,WAAO,GAAG,cAAc,MAAM;AAC5B,aAAO;AACP,aAAO;AACP,eAAS;AAAA;AAGX,WAAO;AAAA;AAAA,QAMH,QAAQ,SAAoC;AAChD,QAAI,QAAQ,OAAO,WAAW;AAC5B,WAAK,aAAa,IAAI;AAAA,WACjB;AACL,WAAK,YAAY,IAAI;AAAA;AAGvB,WAAO;AAAA;AAAA,EAMT,qBAAqB;AACnB,WAAO,OAAO,OAAO,uBAAQ;AAAA;AAAA,EAM/B,iBAAiB;AACf,eAAW,UAAU,KAAK,SAAS;AACjC,aAAO;AAAA;AAAA;AAAA,EAOX,KAAK,SAAkB;AACrB,UAAM,UAAU,KAAK;AAErB,eAAW,UAAU,SAAS;AAC5B,UACE,QAAQ,OAAO,aACd,OAAO,YAAY,UAAa,OAAO,QAAQ,QAAQ,QAAQ,IAChE;AACA,YAAI,KAAK,aAAa;AACpB,kBAAQ,KAAK,kBAAkB,OAAO,QAAQ,QAAQ;AAAA;AAGxD,eAAO,QAAQ,KAAK;AAAA;AAAA;AAAA;AAAA;;;ADhIrB,sBACL,eACA,iBACA,eACA,iBACA;AACA,MAAI,wBAAQ,WAAW;AACrB,UAAM,SAAS,IAAI,OAAO,yBAAS,iBAAiB,iBAAiB;AACrE,kBAAc;AAAA,SACT;AACL,UAAM,SAAS,wBAAQ;AACvB,kBAAc;AAAA;AAAA;AAMlB,aACE,MAAM;AAAA,GACN,MAAM;AAAA,GACN,MAAM;AAAA,GACN,MAAM;AAAA;","names":[]}