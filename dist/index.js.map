{"version":3,"sources":["../src/index.ts","../src/master.ts","../src/worker.ts"],"sourcesContent":["import cluster from 'cluster';\r\nimport { Master } from './master';\r\n\r\nexport function startCluster(\r\n  onMasterStart: (master: Master) => void,\r\n  onMasterMessage: (worker: typeof cluster.worker, message: any) => void,\r\n  onWorkerStart: (worker: typeof cluster.worker) => void,\r\n  onWorkerMessage: (message: any) => void\r\n) {\r\n  if (cluster.isPrimary) {\r\n    const master = new Master(cluster, onMasterMessage, onWorkerMessage);\r\n    onMasterStart(master);\r\n  } else {\r\n    const worker = cluster.worker;\r\n    onWorkerStart(worker);\r\n  }\r\n}\r\n\r\n// @TODO: build a test bench\r\n\r\nstartCluster(\r\n  () => {},\r\n  () => {},\r\n  () => {},\r\n  () => {}\r\n);\r\n","import cluster from 'cluster';\r\nimport * as os from 'os';\r\nimport { Worker } from './worker';\r\n\r\nconst cpus = os.cpus();\r\nconst numWorkers = cpus.length;\r\n\r\ntype Process = typeof cluster;\r\n\r\nexport class Master {\r\n  process: Process;\r\n  workers: Worker[];\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor(process: Process, onMessage, onWorkerMessage) {\r\n    this.process = process;\r\n    this.workers = [];\r\n\r\n    process.on('message', (worker, message) => {\r\n      // @TODO\r\n      onMessage(worker, message);\r\n    });\r\n\r\n    process.on('exit', (worker, code, signal) => {\r\n      console.info(\r\n        'Worker ' +\r\n          worker.process.pid +\r\n          ' died with code: ' +\r\n          code +\r\n          ', and signal: ' +\r\n          signal\r\n      );\r\n      console.info('Starting a new worker...');\r\n      this.spawnWorker();\r\n    });\r\n\r\n    process.on('online', (worker) => {\r\n      console.info('Worker ' + worker.process.pid + ' is online');\r\n      const newWorker = new Worker(worker, onWorkerMessage);\r\n      this.workers.push(newWorker);\r\n    });\r\n\r\n    console.info('Master cluster setting up ' + numWorkers + ' workers...');\r\n\r\n    for (var i = 0; i < numWorkers; i++) {\r\n      this.spawnWorker();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  spawnWorker() {\r\n    let worker = this.process.fork();\r\n\r\n    worker.on('disconnect', () => {\r\n      worker.removeAllListeners();\r\n      worker.kill();\r\n      worker = undefined;\r\n    });\r\n\r\n    return worker;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  getWorkerProcesses() {\r\n    return Object.values(cluster.workers);\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  restartWorkers() {\r\n    for (const worker of this.workers) {\r\n      worker.restart();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  send(target, message) {\r\n    const workers = this.getWorkerProcesses();\r\n\r\n    for (const worker of workers) {\r\n      if (\r\n        target === 'all' ||\r\n        (worker.process !== undefined && worker.process.pid === target)\r\n      ) {\r\n        console.info(`[MASTER -> PID ${worker.process.pid}]`, message);\r\n        worker.process.send({\r\n          from: 'master',\r\n          message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import cluster from 'cluster';\r\n\r\ntype Process = typeof cluster.worker;\r\n\r\nexport class Worker {\r\n  process: Process;\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor(worker, onMessage) {\r\n    this.process = worker;\r\n\r\n    this.process.on('message', (message) => {\r\n      if (this.process.process !== undefined) {\r\n        console.info(`[MASTER -> PID ${this.process.process.pid}]`, message);\r\n        onMessage(message);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  restart() {\r\n    this.send({\r\n      command: 'shutdown',\r\n      from: this.process.process.pid,\r\n    });\r\n\r\n    this.kill();\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  kill() {\r\n    this.process.removeAllListeners();\r\n    this.process.kill('SIGKILL');\r\n    this.process = undefined;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  send(message) {\r\n    console.info(`[PID ${this.process.process.pid} -> MASTER]`, message);\r\n    this.process.process.send(message);\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAoB;;;ACApB,qBAAoB;AACpB,SAAoB;;;ACGb,mBAAa;AAAA,EAMlB,YAAY,QAAQ,WAAW;AAC7B,SAAK,UAAU;AAEf,SAAK,QAAQ,GAAG,WAAW,CAAC,YAAY;AACtC,UAAI,KAAK,QAAQ,YAAY,QAAW;AACtC,gBAAQ,KAAK,kBAAkB,KAAK,QAAQ,QAAQ,QAAQ;AAC5D,kBAAU;AAAA;AAAA;AAAA;AAAA,EAQhB,UAAU;AACR,SAAK,KAAK;AAAA,MACR,SAAS;AAAA,MACT,MAAM,KAAK,QAAQ,QAAQ;AAAA;AAG7B,SAAK;AAAA;AAAA,EAMP,OAAO;AACL,SAAK,QAAQ;AACb,SAAK,QAAQ,KAAK;AAClB,SAAK,UAAU;AAAA;AAAA,EAMjB,KAAK,SAAS;AACZ,YAAQ,KAAK,QAAQ,KAAK,QAAQ,QAAQ,kBAAkB;AAC5D,SAAK,QAAQ,QAAQ,KAAK;AAAA;AAAA;;;AD3C9B,IAAM,QAAO,AAAG;AAChB,IAAM,aAAa,MAAK;AAIjB,mBAAa;AAAA,EAOlB,YAAY,SAAkB,WAAW,iBAAiB;AACxD,SAAK,UAAU;AACf,SAAK,UAAU;AAEf,YAAQ,GAAG,WAAW,CAAC,QAAQ,YAAY;AAEzC,gBAAU,QAAQ;AAAA;AAGpB,YAAQ,GAAG,QAAQ,CAAC,QAAQ,MAAM,WAAW;AAC3C,cAAQ,KACN,YACE,OAAO,QAAQ,MACf,sBACA,OACA,mBACA;AAEJ,cAAQ,KAAK;AACb,WAAK;AAAA;AAGP,YAAQ,GAAG,UAAU,CAAC,WAAW;AAC/B,cAAQ,KAAK,YAAY,OAAO,QAAQ,MAAM;AAC9C,YAAM,YAAY,IAAI,OAAO,QAAQ;AACrC,WAAK,QAAQ,KAAK;AAAA;AAGpB,YAAQ,KAAK,+BAA+B,aAAa;AAEzD,aAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACnC,WAAK;AAAA;AAAA;AAAA,EAOT,cAAc;AACZ,QAAI,SAAS,KAAK,QAAQ;AAE1B,WAAO,GAAG,cAAc,MAAM;AAC5B,aAAO;AACP,aAAO;AACP,eAAS;AAAA;AAGX,WAAO;AAAA;AAAA,EAMT,qBAAqB;AACnB,WAAO,OAAO,OAAO,uBAAQ;AAAA;AAAA,EAM/B,iBAAiB;AACf,eAAW,UAAU,KAAK,SAAS;AACjC,aAAO;AAAA;AAAA;AAAA,EAOX,KAAK,QAAQ,SAAS;AACpB,UAAM,UAAU,KAAK;AAErB,eAAW,UAAU,SAAS;AAC5B,UACE,WAAW,SACV,OAAO,YAAY,UAAa,OAAO,QAAQ,QAAQ,QACxD;AACA,gBAAQ,KAAK,kBAAkB,OAAO,QAAQ,QAAQ;AACtD,eAAO,QAAQ,KAAK;AAAA,UAClB,MAAM;AAAA,UACN;AAAA;AAAA;AAAA;AAAA;AAAA;;;AD7FH,sBACL,eACA,iBACA,eACA,iBACA;AACA,MAAI,wBAAQ,WAAW;AACrB,UAAM,SAAS,IAAI,OAAO,yBAAS,iBAAiB;AACpD,kBAAc;AAAA,SACT;AACL,UAAM,SAAS,wBAAQ;AACvB,kBAAc;AAAA;AAAA;AAMlB,aACE,MAAM;AAAA,GACN,MAAM;AAAA,GACN,MAAM;AAAA,GACN,MAAM;AAAA;","names":[]}