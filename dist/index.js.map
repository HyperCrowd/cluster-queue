{"version":3,"sources":["../src/index.ts","../src/cli.ts","../src/command.ts","../src/master.ts","../src/worker.ts","../src/queue.ts"],"sourcesContent":["import type { CliDefinition, KeyPair } from './index.d';\r\nimport cluster from 'cluster';\r\nimport { Cli } from './cli';\r\nimport { Command } from './command';\r\nimport { Master } from './master';\r\nimport { Queue } from './queue';\r\n\r\nexport class Cluster {\r\n  commands: CliDefinition[];\r\n  useLogging: boolean;\r\n  onPrimaryMessage: (\r\n    worker: typeof cluster.worker,\r\n    message: any\r\n  ) => Promise<void>;\r\n  onWorkerMessage: (message: any) => Promise<void>;\r\n\r\n  constructor(commands: CliDefinition[], useLogging: boolean = false) {\r\n    this.commands = commands;\r\n    this.useLogging = useLogging;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  onMessage(\r\n    onPrimaryMessage: (\r\n      worker: typeof cluster.worker,\r\n      message: any\r\n    ) => Promise<void>,\r\n    onWorkerMessage: (message: any) => Promise<void>\r\n  ) {\r\n    this.onPrimaryMessage = onPrimaryMessage;\r\n    this.onWorkerMessage = onWorkerMessage;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  async start(\r\n    onPrimaryStart: (master: Master) => Promise<void>,\r\n    onWorkerStart: (worker: typeof cluster.worker) => Promise<void>\r\n  ) {\r\n    if (cluster.isPrimary) {\r\n      const primaryQueue = new Queue(cluster);\r\n      const workerQueue = new Queue(cluster);\r\n      const cli = new Cli(primaryQueue, this.commands);\r\n      const primary = new Master(\r\n        cluster,\r\n        cli,\r\n        primaryQueue,\r\n        workerQueue,\r\n        this.onPrimaryMessage,\r\n        this.onWorkerMessage,\r\n        this.useLogging\r\n      );\r\n\r\n      // Parse the CLI\r\n      cli.start();\r\n\r\n      // Wait for the primary queue to be empty\r\n\r\n      await primary.start();\r\n      await onPrimaryStart(primary);\r\n    } else {\r\n      await onWorkerStart(cluster.worker);\r\n    }\r\n  }\r\n}\r\n\r\n// @TODO: build a test bench\r\n\r\n(async function main() {\r\n  const instance = new Cluster(\r\n    [\r\n      {\r\n        command: 'cli:test',\r\n        description: 'Test',\r\n        args: {\r\n          '<test>': 'A fun test',\r\n          '<pee>': 'no',\r\n        },\r\n        options: {},\r\n        action: (args: KeyPair, state: KeyPair, command: Command) => {\r\n          state[command.command] = command.args;\r\n        },\r\n      },\r\n      {\r\n        command: 'doThing',\r\n        action: (command: Command) => {},\r\n      },\r\n    ],\r\n    true\r\n  ).onMessage(\r\n    () => undefined,\r\n    () => undefined\r\n  );\r\n\r\n  await instance.start(\r\n    () => undefined,\r\n    () => undefined\r\n  );\r\n})();\r\n","import type { CliDefinition, KeyPair } from './index.d';\r\nimport cluster from 'cluster';\r\nimport { Command as Commander } from 'commander';\r\nimport { Queue } from './queue';\r\nimport { Command } from './command';\r\n\r\nconst { name, description, version } = require('../package.json');\r\n\r\nconst removeChars = /[^A-Za-z0-9_]/g;\r\n\r\nexport class Cli {\r\n  queue: Queue;\r\n  program: Commander;\r\n\r\n  constructor(queue: Queue, definitions: CliDefinition[]) {\r\n    this.queue = queue;\r\n    this.program = new Commander();\r\n    this.program.name(name).description(description).version(version);\r\n\r\n    for (const definition of definitions) {\r\n      this.register(definition);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers a new CLI command\r\n   */\r\n  register(definition: CliDefinition) {\r\n    if (!cluster.isPrimary) {\r\n      return;\r\n    }\r\n\r\n    const isCliCommand = definition.command.indexOf('cli:') === 0;\r\n\r\n    const commandName = isCliCommand\r\n      ? definition.command.substring(4)\r\n      : definition.command;\r\n\r\n    // Register the definition as a command\r\n    Command.register(definition.command, definition.action);\r\n\r\n    if (!isCliCommand) {\r\n      return;\r\n    }\r\n\r\n    // Register the command\r\n    const newCommand =\r\n      commandName === '' ? this.program : this.program.command(commandName);\r\n\r\n    newCommand.description(definition.description);\r\n\r\n    // Define the end-of-line arguments\r\n    const argKeys = Object.keys(definition.args);\r\n\r\n    for (const arg of argKeys) {\r\n      const description = definition.args[arg];\r\n\r\n      newCommand.argument(arg, description);\r\n    }\r\n\r\n    // Define the flags/options\r\n    for (const option of Object.keys(definition.options)) {\r\n      const description = definition.options[option];\r\n\r\n      newCommand.option(option, description);\r\n    }\r\n\r\n    // program.action(definition.action);\r\n    newCommand.action((...args: string[] & [(KeyPair | string)?]) => {\r\n      const options =\r\n        typeof args[args.length - 2] === 'string'\r\n          ? {}\r\n          : (args[args.length - 2] as KeyPair);\r\n\r\n      options.cli = {};\r\n\r\n      let i = 0;\r\n      for (const key of argKeys) {\r\n        options.cli[key.replace(removeChars, '')] = args[i];\r\n        i += 1;\r\n      }\r\n\r\n      this.queue.add(\r\n        new Command(definition.command, options, 'cli', 'primary')\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start the CLI\r\n   */\r\n  start() {\r\n    this.program.parse(process.argv);\r\n  }\r\n}\r\n","import type { CommandAction, iCommand, KeyPair } from './index.d';\r\nimport { Queue } from './queue';\r\n\r\nconst commands: KeyPair<CommandAction> = {};\r\n\r\nexport class Command implements iCommand {\r\n  command: string;\r\n  args: KeyPair;\r\n  from: number | 'primary' | 'cli';\r\n  to: number | 'workers' | 'primary';\r\n\r\n  /**\r\n   * Registers a new command\r\n   */\r\n  static register(command: string, onAction: CommandAction) {\r\n    commands[command] = onAction;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   */\r\n  constructor(\r\n    command: string,\r\n    args: KeyPair,\r\n    from: number | 'primary' | 'cli',\r\n    to: number | 'workers' | 'primary'\r\n  ) {\r\n    if (commands[command] === undefined) {\r\n      throw new RangeError(`\"${command}\" has not been registered.`);\r\n    }\r\n\r\n    this.command = command;\r\n    this.args = args;\r\n    this.from = from;\r\n    this.to = to;\r\n  }\r\n\r\n  /**\r\n   * Clones a command and changes the to and from properties\r\n   */\r\n  clone(from: number | 'primary', to: number | 'workers' | 'primary') {\r\n    return new Command(this.command, this.args, from, to);\r\n  }\r\n\r\n  /**\r\n   * Runs the command\r\n   */\r\n  run(state: KeyPair, priamryQueue: Queue, workerQueue: Queue) {\r\n    return commands[this.command](\r\n      this.args,\r\n      state,\r\n      this,\r\n      priamryQueue,\r\n      workerQueue\r\n    );\r\n  }\r\n}\r\n","import type { KeyPair } from './index.d';\r\ntype Process = typeof cluster;\r\n\r\nimport cluster from 'cluster';\r\nimport * as os from 'os';\r\nimport { Cli } from './cli';\r\nimport { Command } from './command';\r\nimport { Queue } from './queue';\r\nimport { Worker } from './worker';\r\n\r\nconst cpus = os.cpus();\r\nconst numWorkers = cpus.length;\r\n\r\nexport class Master {\r\n  process: Process;\r\n  workers: Worker[] = [];\r\n  primaryQueue: Queue;\r\n  workerQueue: Queue;\r\n  useLogging: boolean;\r\n  cli: Cli;\r\n  state: KeyPair = {};\r\n\r\n  constructor(\r\n    process: Process,\r\n    cli: Cli,\r\n    primaryQueue: Queue,\r\n    workerQueue: Queue,\r\n    onMessage: (\r\n      worker: typeof cluster.worker,\r\n      command: Command\r\n    ) => Promise<void>,\r\n    onWorkerMessage: (message: any) => Promise<void>,\r\n    useLogging: boolean = false\r\n  ) {\r\n    this.cli = cli;\r\n    this.process = process;\r\n    this.useLogging = useLogging;\r\n    this.primaryQueue = primaryQueue;\r\n    this.workerQueue = workerQueue;\r\n\r\n    process.on('newCommand', (to: string) => {\r\n      // New command enqueued\r\n      if (to === 'primary') {\r\n        const command = this.primaryQueue.next();\r\n        command.run(this.state, this.primaryQueue, this.workerQueue);\r\n      }\r\n    });\r\n\r\n    process.on('message', async (worker, command) => {\r\n      // Primary receives message from worker\r\n      if (command.command === '_next') {\r\n        const nextCommand = this.workerQueue.next(worker);\r\n        await onMessage(worker, nextCommand);\r\n      } else {\r\n        await onMessage(worker, command);\r\n      }\r\n    });\r\n\r\n    process.on('exit', (worker, code, signal) => {\r\n      // When a worker quits\r\n      if (this.useLogging) {\r\n        console.info(\r\n          'Worker ' +\r\n            worker.process.pid +\r\n            ' died with code: ' +\r\n            code +\r\n            ', and signal: ' +\r\n            signal\r\n        );\r\n      }\r\n\r\n      this.spawnWorker();\r\n    });\r\n\r\n    process.on('online', (worker) => {\r\n      // When a worker spawns\r\n      if (this.useLogging) {\r\n        console.info('Worker ' + worker.process.pid + ' is online');\r\n      }\r\n\r\n      const newWorker = new Worker(worker, onWorkerMessage);\r\n      this.workers.push(newWorker);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Starts the master process\r\n   */\r\n  async start() {\r\n    await Promise.all([\r\n      new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          if (this.primaryQueue.queue.length === 0) {\r\n            resolve(true);\r\n          }\r\n        }, 100);\r\n      }),\r\n    ]);\r\n\r\n    if (this.useLogging) {\r\n      console.info('Master cluster setting up ' + numWorkers + ' workers...');\r\n    }\r\n\r\n    for (var i = 0; i < numWorkers; i++) {\r\n      this.spawnWorker();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Spawn a new worker that self-cleans up\r\n   */\r\n  spawnWorker() {\r\n    let worker = this.process.fork();\r\n\r\n    worker.on('disconnect', () => {\r\n      worker.removeAllListeners();\r\n      worker.kill();\r\n      worker = undefined;\r\n    });\r\n\r\n    return worker;\r\n  }\r\n\r\n  /**\r\n   * Adds a command for later processing\r\n   */\r\n  async addTask(command: Command): Promise<Command> {\r\n    if (command.to === 'primary') {\r\n      this.primaryQueue.add(command);\r\n    } else {\r\n      this.workerQueue.add(command);\r\n    }\r\n\r\n    return command;\r\n  }\r\n\r\n  /**\r\n   * Get worker processes\r\n   */\r\n  getWorkerProcesses() {\r\n    return Object.values(cluster.workers);\r\n  }\r\n\r\n  /**\r\n   * Restart all Worker instances\r\n   */\r\n  restartWorkers() {\r\n    for (const worker of this.workers) {\r\n      worker.restart();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a message to workers\r\n   */\r\n  send(command: Command) {\r\n    const workers = this.getWorkerProcesses();\r\n\r\n    for (const worker of workers) {\r\n      if (\r\n        command.to === 'workers' ||\r\n        (worker.process !== undefined && worker.process.pid === command.to)\r\n      ) {\r\n        if (this.useLogging) {\r\n          console.info(`[MASTER -> PID ${worker.process.pid}]`, command);\r\n        }\r\n\r\n        worker.process.send(command);\r\n      }\r\n    }\r\n  }\r\n}\r\n","type Process = typeof cluster.worker;\r\n\r\nimport cluster from 'cluster';\r\n\r\nexport class Worker {\r\n  process: Process;\r\n\r\n  constructor(worker: Process, onMessage: (message: any) => Promise<void>) {\r\n    this.process = worker;\r\n\r\n    this.process.on('message', async (message) => {\r\n      if (this.process.process !== undefined) {\r\n        console.info(`[MASTER -> PID ${this.process.process.pid}]`, message);\r\n        await onMessage(message);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restarts the worker\r\n   */\r\n  restart() {\r\n    this.send({\r\n      command: 'shutdown',\r\n      from: this.process.process.pid,\r\n    });\r\n\r\n    this.kill();\r\n  }\r\n\r\n  /**\r\n   * Kills the worker\r\n   */\r\n  kill() {\r\n    this.process.removeAllListeners();\r\n    this.process.kill('SIGKILL');\r\n    this.process = undefined;\r\n  }\r\n\r\n  /**\r\n   * Sends a message from the worker to the primary\r\n   */\r\n  send(message) {\r\n    console.info(`[PID ${this.process.process.pid} -> MASTER]`, message);\r\n    this.process.process.send(message);\r\n  }\r\n}\r\n","import type { iQueue } from './index.d';\r\nimport cluster from 'cluster';\r\nimport { Command } from './command';\r\n\r\ntype Priamry = typeof cluster;\r\ntype Worker = typeof cluster.worker;\r\n\r\nexport class Queue implements iQueue {\r\n  queue: Command[] = [];\r\n  primary: Priamry;\r\n\r\n  constructor(primary: Priamry) {\r\n    this.primary = primary;\r\n  }\r\n\r\n  /**\r\n   * Adds a command to the queue\r\n   */\r\n  add(command: Command) {\r\n    const index = this.queue.push(command);\r\n    this.primary.emit('newCommand', command.to);\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Removes the first command from the queue\r\n   */\r\n  shift() {\r\n    return this.queue.shift();\r\n  }\r\n\r\n  /**\r\n   * Gets the first command in the queue and may send it to the worker to do\r\n   */\r\n  next(worker?: Worker): Command | undefined {\r\n    const command = this.queue.shift();\r\n\r\n    if (command === undefined) {\r\n      return;\r\n    }\r\n\r\n    const pid = cluster.isPrimary ? 'primary' : worker.process.pid;\r\n    const newCommand = command.clone('primary', pid);\r\n\r\n    if (worker) {\r\n      worker.send(newCommand);\r\n    }\r\n\r\n    return newCommand;\r\n  }\r\n}\r\n"],"mappings":"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","names":[]}